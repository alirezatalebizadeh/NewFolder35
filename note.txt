=================================================================
====================search question to find question=============
=================================================================



hr ==> human resource (مسول منابع انسانی)
وظیفه : مسول دیدن رزومه و  استخدام و اخراج و پاسخ گویی به سوالات کارمندان  ... افراد در شرکت 
=========================مهارت نرم================================
شبکه سازی مهمتر از ساختن رزومه و انتشار آن در سایت های کاریابی هست. ❤️شغل های خفن با اگهی پر نمیشن.❤️

اصل :
حضور فعال در شبکه های اجتماعی (اینستا و لینکدین و ...) + کمک به بقیه برنامه نویسان 

شبکه سازی ==> اشتراک دانش و تجربه / دیده شدن / افزایش فروش

ارتباط با هر شخصی شبکه سازی نیس...(با افراد هم رنگ خودت در کار ارتباط بگیر)
محبوبیت نه معروفیت...(اعتبار خیلی مهمه )
عدم سواستفاده از موقعیت... 
شبکه بازی پارتی بازی نیس...
از خودگذشتگی (مادی و معنوی) .تیم خوب رو به خاطر درامد کم از دست نده. تیم خوب رو محکم بچسب.
شبکه بزرگتر =! شبکه قوی تر(کیفیت افراد مهمتره تا تعداد زیاد افراد)
حفظ ارتباط و شبکه (ارتباط یعنی مداوم و پی در پی با هم بودن نه فقط شماره داشتن)
عدم درگیری با افراد شبکه  
==============
با رفرنس صحبت کن.اسم رفرنست رو بیار بین حرفات . اضافه گویی نکن. 
mdn , javascript.jsرو کامل بخون.

مصاحبه کننده با بیانت میفهمه چقدر تسلط داری و باید ردت کنه یا نه !

پاسخ بلند و کش دار نده به مصاحبه کننده. علمت رو تا جایی که بلدی ارايه بده . اضافه گویی نشونه تازه کار بودنه .

از اون اندازه که هستی بیشتر نشون نده. علمت و مهارتتو صادقانه ارايه بده . تکنولوژی که بلد نیستی رو روش مانور نده که بلدی.

========================= سوالات مبتدی و سطح جونیور=========================

مدت زمان مطرح نیس . سطح مهارت و تجربه ادامه راهتو مشخص میکنه .
سطح جونیور نیازمند منتوره و با تکنولوژی ها آشنایی نداره. دایم باید یکی بالا سرش باشه. سوالاتی مثل کدوم راهو برم داره.ری اکت برم با ویو. نمیتونه یکی رو منتور کنه و بالاسرش باشه. 

جونیور بودن خجالت نداره . پیوسته آموزش ببین. با افتخار برو سر جلسات و به اندازه توانت ارايه بده. 

===========================data tyoes=================

string ('text' , "text" , `text`) /
number(-12 , 3.14 , +12) / 
bigInt  (math.max_value) / 
boolean (true , false) /
undefined ()/ زمانی که نوع یه چیزی مشخص نیس
object {id , name, password , ...}/==>برای ذخیره ی اطلاعات کاربران 
(null / type0f null==> object (این یک باگ توی جاوااسکریپت هست)(زمانی که بخوایم مقدار اولیه ای به یه متغیر بدیم و توی فانکشن و جاهای دیگه مقدارش رو مشخص کنیم.))
symbol /مثل ایدی کاربر و هر چیزی که منحصر به فرد و یکتا هست

array /==> یه نوع ابجکت به حساب میان ولی keyولیو دارن

=======================================false and true value

false : 
false , 0 , -0 , - (number value) , "", null , undefind , NaN , 

true : other values 

کاربرد : در شرط  ها و صحت سنجی برای گرفتن اطلاعات واقعی از حافظه لوکال استورج    

if(!value or !isLogin) {
    //code
}
========================what's deffrent between null and undefind?=========


let myFirstVal= null;
let mySecondVar = undefined;
let mtThirdVar ;//whitOut value
console.log(myFirstVal);//=> nul
console.log(mySecondVar);//=> undefined
console.log(myFirstVal);// null


function logger(num){
    console.log(num);
}
logger()//without value ==> undefined

//null = 0 
console.log(null + 10 ); // 0+10 = 10
console.log(null * 5); // 0*5 =0
//undefined = ? ( نامشخص و ناشناس)
console.log(undefined + 10); // ==> NaN
console.log(Boolean(undefined));//false
console.log(Boolean(null));//false

console.log(null == undefined);//true
console.log(null === undefined);//false
console.log(!undefined === !null) //(true === true);//! true

==========================================Scope=================

types:

global
local {
    block ,
    function
}

گلوبال ها همه جا قابل دسترسی ان.

var / let / const

var همه جا قابل دسترسه حتی اگه لوکال باشه
let globalVar = "global";

{
  let localVar = "local";
}


//console.log(globalVar);//global
//console.log(localVar);// not defined


function logger(){
    if(true){
        var varVar = 'Var value'
        let letVar = 'let Value'
        const constVar= 'const Var'
    }

    console.log(varVar);//var value
    console.log(letVar);//not defined
    console.log(constVar);//
}
logger()
----------------------------question1------------

function func(obj) {
  // اسم ورودی گمراه کننده هست.
  obj = null;
  console.log(obj); //null
}
// console.log(obj); Cannot access 'obj' before initialization

const obj = {
  name: "Sabzlearn",
};

func(obj);

const result = obj.name;
console.log(result); //sabzlearn

-------------------------Case sensetive----------------
به حروف بزرگ و کوچیک حساسه.
let user1 = "Amin";
let user2 = "min";

console.log(user1 == user2); //false

console.log('null'==='Null'); //false

onsole.log(typeof Null);//undefined

console.log(typeof undefined === typeof Null);// undefined = undefined ==>true

let result = typeof !!null; // ==> typeof false
console.log(result);//Boolean
console.log(!'alireza');//false

----------------------access to object prop-----------------------

let user={
    name:'Alireza',
    family:'zare',
    age:25
}

//Way 1 ==> Dot notation
console.log(user.name);//Alireza
let prop='name'
console.log(user[prop]);//Alireza

//Way2 ==> Brocket notation
console.log(user['family']);


--------------------------question------------------
const propName = 'sabzlearn'

const obj ={
    [propName]: propName
}

const result = obj['propName'] // ==> obj.propName

console.log(obj); // ==> {sabzlearn :'sabzlearn'}

console.log(result);// ?
//undefined

--------------------------delete method------question---------------------

delete can not delete varable (just delete prop of object)


let number =12;

//delete can not delete varable
delete number

const result= number
console.log(result);//? =>12

------------------------------

let number ={
    item:12
}

delete number.item
//delete can not delete varable

const result= number.item
console.log(result);// ? => undefined


==============================oprator usage (or  ,  and)====================================

|| ==> or از روی مقادیر فالس میگذره و مقادیر ترو رو برمیگردونه (trueor ترور)

console.log(true || alert(12)); //true
//console.log(false || alert(12)); //run alert
//console.log(false || true || alert(12)); //true
console.log(0 || 12 || alert(12));//12
console.log(0 || 'sabzlearn'|| alert('ali'));//sabzlearn
console.log(0 || ""|| 4000);//4000

-------------------
&& ==> and . از رو ترو رد میشه.اگه با فالس برسه متوقف میشه.

console.log('amin'&& 'amir');//true && true => amir

let numbers = [1,2,3,4,5,6,7,8,9]

numbers.length > 0 && numbers.forEach(num => console.log(num))// 1,2,3,4,5,...


---------------------------------------question--------------
let result1 = null || undefined ||18; // false || false ||true
let result2= null && undefined 
console.log(result1); ?//18
console.log(result2); ?//null

---------------------------------------question----------
let result = 0 || 1 && 2 && 3 ; //false || true && true && true

console.log(result);//? => 3

=============================arquments======================

گیرنده ی تمامی ورودی های یک تابع هست و یک شبه آرایه هست . باید حتما تبدیلش کنی با ارایه بعد روش کار کنی.
function addNumbers(){
    let sum = 0;
    Array.from(arguments).forEach(num => {
        sum +=  num
    });
    return sum
}

// addNumbers(1,2,3,4)//Arguments(4) [1, 2, 3, 4, callee: ƒ, Symbol(Symbol.iterator): ƒ]

console.log(addNumbers(1,2,3,4,5,6,7,8,9));//45

----------------------------------------question------------------
const addNumbers = () => {
  let sum = 0;

  Array.from(arguments).forEach((num) => {
    sum += num;
  });
  return sum;
};

console.log(addNumbers(1, 2, 3, 4, 5, 6, 7, 8, 9));//app.js:4 Uncaught ReferenceError: arguments is not defined

توی اروو فانکشن نمیتونیم از ارگیومنت استفاده کنیم.

==================================hoisting================================
یعنی بالابردن .

افعالی که بصورت ساده تعریف میشن و متغیر هایی که با کلمه ور ساخته میشن هویست میشن.
looger()

function looger(){
    console.log('log');
}

number=12
console.log(number);

var number;

--------------------------------question------------------------------------
فقط تعریف متغیر هویست میشه . نه مقدار دادن بهش.

var age = 10;

function logAge() {
    var age
  console.log(age);
   age = 20;
}

logAge();//? => undefined

===========================Number method==================================
برای تبدیل یه داده به نوع عددی استفاده میشه.

let num = Number("15");
let num2 = Number("Alireza");
console.log(num); //15
console.log(num2); //NaN
console.log(Number(true)); //1
console.log(Number(false)); //0
console.log(Number("")); //0
console.log(Number('')+15);  //15

----------------------------question--------------------------
function addParams(firstParam, secondParam = 5) {
  return firstParam + secondParam;
}
//ورودی تابع زمانی دیفالتش رو بر میداره که نامشخض باشه نه نال
//null = 0;
let res = addParams(7, null); // ?=> 7 + 0 = 7
let res2 = addParams(7, undefined); // ?=> 7 + 5 = 12
console.log(res);

----------------------------question-----------------------------
let result = 18;

function func() {
  inner();
  return;

  function inner() {
    result = 30;
  }
}

func();

console.log(result); //? => 30
//چون تابع به هویست میشه .

================================= توابع خودخوان IIFE(self invoked)==============================
این توابع نیازی به فراخوانی نداره و خود به خود اجرا میشه.

برای ساخت کتابخونه و پلاگین استفاده میشه.

//Syntax
(function () {
  console.log('I.m alireza from iran');
})();

------------------------------------------question---------------------
let outSide = 18;

if (outSide) {
  let inSide = 30;
}
// چون با کلمه لت ساخته شده بهش دسترسی نداریم

let result = typeof inSide;
console.log(result); //? ==>  undefined


============================ Automatic Selection Insertion ===============================
بصورت  اتوماتیک مرورگر انتهای کدهامون سمی کالون میزاره.


//استثنا ها
let num1 = 2;
let num2 = 2;

let numbers = [1, 2, 6];

numbers.forEach((num) => {
  console.log(num);
});

["ali", "reza", "mohammad"].forEach((person) => {
  console.log(person);
});

(function () {
  console.log("IIFE");
})();

const userGenerator = (userName = "alireza") => {
  return {
    name: userName,
  };
};

console.log(userGenerator()); //{name :'alireza'}

let a = 5;
let b = 3 + a ;
('sabzlearn' + a).toUpperCase()
-----------------------------question-------------------------------
function func1() {
  return {
    name: "alireza",
  };
}

function func2() {
  return;
  {
    family: "zare";
  }
}

console.log(typeof func1()); //? object
console.log(typeof func2()); //? undefined

--------------------------------question------------------------------

let value = 13;
const result = value--;
console.log(value);//? ==> 12
console.log(result);//? ==>13

// let num1 = 10;
// console.log(num1);
// num1--; //9
// --num1; //8
// num1++; //9
// ++num1; //10
// console.log(num1);

----------------------------------question---------------------------------
بهعد از ۳۴ باید سمی کالون بزاری که به ارور نخوری. مرورگر فکر میکنه روی ۳۴ فانکشن اجرا کردی
var value = 18;
var result = 34

(function () {
  result = value;

  var value = 90;
})();

console.log(result); //? => undefined

//refactor

(function () {
  var value;

  result = value; //undefined
  //متغیر هویست میشه و میره خط اول. اما مقدارش توی همین خط میمونه.چوم مقدار نداری نتیجش اندیفایند میشه
  value = 90;

  var value = 90;
})();

--------------------------------------question--------------------------
var foo = (function () {
  var foo = 2;
})();
//چیزی بر نگردونه . اگه برمیگردوند میشه ۲
console.log(foo);//? ==> undefined

-----------------------------------------question-----------------------
var result = (function (){
  var name = 'sabzlearn'
  return name
})()
//چون مقدار رو برگردونده 
console.log(result);//? => sabzlearn

---------------------------------------------question--------------------
var app = {}(function (param) {
  console.log(param === app); //? => true
})(app);
//دریته دتا ابجکت با هم مقایسه شدن ولی دپتاش یکی هستن. ادرس هاشون ا هم برابره.پس نتیجه مقایسه ترو میشه

-------------------------------------question--------------------------

(function (){
  var a = 5;
})()

console.log(a); 
//چون متغیر توی فانکشن تعریف شده 
//output => Error : a is not defined
--------------------------------------question--------------------------
-function(){
console.log('text');
}()
//مشکلی نداره . حتی سینتکسی
//output => text
--------------------------------------question-------------------------
var app = {};

(function (param) {
  param.name = "alireza";
})(app);
console.log(app.name);

//چون ابجکت رفرنس تایپ به حساب میاد  خروجی  بهمون میده
//output => alireza

-------------------------------------10 question -------------------------

//console.log(typeof null); // output (این یک باگ توی زیان هست که هنوز نتونستن درستش کنن)=> object

//console.log(typeof undefined);//output => undefined

//console.log(null ==undefined); //output => true
//چوت دوتا مساوی داره مقادیرشون مقایسه میشه
//console.log(null === undefined); //false
//تایپاشون یکی نیستن

//console.log(undefined && null); //output => undefined
//چون مقدار اولی فالس هست و دیگه ادامه داده نمیشه
//&& به فالس رسید استاپ میکنه

// var value = null;
// console.log(++value);//output => +1
// null = 0;

//console.log(!!null); //output => false
//null = false
//!null = true
//!!null = null

//console.log(10 - null);// output => 10
//10 - 0 = 10

//console.log(200 - undefined); //output => NaN
//undefined مقدار عددی نداره
//undefined != 0

//var value = undefined;
//console.log(--value);//output => NaN

//var undefined = 10;
//console.log(undefined); //output => undefined
//در این زبان نمیتونم از کلماتی مثل undefined , null , ... استفاده کنیم برای نام گذاری هر چیزی

================================NaN================================

نمیتونیم مقادیری که نمیشه به عدد تبدیل کرد عملیات ریاضی اجرا کرد. 

console.log("sabzlearn" / "ali"); //NaN
console.log(12 / "Ali"); //NaN
console.log(Math.floor("amir")); //NaN
console.log("react" + " js"); //react js
console.log(!!NaN); //false
console.log(typeof NaN); //number
console.log(NaN + 1); //NaN
console.log(NaN == NaN, NaN === NaN); //false , false
console.log("js" - " vue" === NaN); // false

--------------------------------9 question about NaN--------------------------
console.log( 100 + NaN);// output => NaN
console.log(typeof NaN);//output => NaN
console.log(100 - NaN);//output =>NaN
console.log('a' - NaN);//output => NaN
console.log('a' + NaN); //output => aNaN ===> میتونیم با هم جمع بزنیم
console.log(NaN == NaN); //output => false ==> با هیچی مساوی نیستNaN
console.log('a' - 'b'); // output => NaN
console.log('js' + 'react' / 'vue'); //output => jsNaN
//react / vue ==> NaN
//js + NaN ==> jsNaN

-------------------------------------8 question about scope--------------------------

// (function (){
// var a =10;
// })()
// console.log(a);// output => ReferenceError: a is not defined
---------------------------
// var foo = (function(){
//     var foo = 1;
// })
// foo()
// console.log(foo);
//output =>

// ƒ (){
//     var foo = 1;
// }
---------------------------

// var i = 5;
// if (i < 20) {
//   var k = 50;
// }
 //متغیر ور هیچ کاری به اسکوپ ها نداره . کلا عمومی به حساب میاد.
// console.log(k); //output => 50

 --------------------------

var id = 10;
var site = 'alireza'
console.log(window.id); // output = 10
console.log(window.site);//output = alireza

---------------------------
function foo() {
  var number = 10;
  func();
}

function func() {
  console.log(number); // number is not defined
}
//چون بهش دسترسی نداره 
foo();
---------------------------
var count = 10;

function foo() {
  var count = 100;
  function func() {
    console.log(count); //output => 100
  }

  func();
}
//اول اسکوپ خودش رو میگرده
foo();

--------------------------

var size = 18;
function foo() {
   size = 100;
}

foo();
console.log(size); // output = 18

--------------------------
var number = 10;

(function () {
  var number = 100;
})();
//دسترسی به اسکوپ فعل نداریم.
console.log(number);// output => 10

-------------------------

=============================================question about type of=========

var foo = function(){}

console.log(typeof foo);// output => function

console.log(typeof []); // output => object
//ارایه یه ابجکت کلیدخوره

console.log(typeof {});//output => object

console.log(typeof Object); // output => function
console.log(typeof Array); // output => function
console.log(typeof Function); // output => function
console.log(typeof Number); // output => function
console.log(typeof String); // output => function
//۵ متد بالا کانستراکتور به حساب میان و فانکشن هستن

console.log(typeof undefined);//output => undefined
console.log(typeof null);//output => object
console.log(typeof NaN); // output => number
console.log(typeof Infinity);//output => number
console.log(typeof -Infinity); // output => number
//inifinity => بینهایت

console.log(4 / 0); // inifinity


var id // undefined
console.log(typeof id);

=================================question about arguments=============
function foo(a, b) {
  console.log(arguments.length); //? => 6
}
foo(1, 2, 3, 4, 5, 6);
//ارگیومنت فقط ورودی هایی که ارسال میشه رو دریافت میکنه

--------------------------------

function foo(a, b) {
  console.log(foo.length); //? => 2
}
//تعداد ورودی هایی هست که خودمون در نظر گرفتیم. a,b
foo(1, 2, 3, 4, 5, 6);

-------------------------------
function foo() {
  arguments[0] = 5;
  console.log(arguments[0]); //? => 5
}
//مقادیر ارگیومنت رو میتونیم تغییر بدیم. یعنی فقط قابل خواندن نیستن

foo();
-------------------------------------
//ارایه و شبه ارایه یک ابجکت به حساب میان
function foo() {
  console.log(typeof arguments); //? => object
}

foo(1, 2, 3);
-----------------------------------
function foo() {
  arguments.forEach((e) => {
    console.log(e); // ? => arguments.forEach is not a function
  });
}

foo();
=========================================22 question about and , or =========
console.log("cars" && "plans"); //? => plans
console.log(undefined && null); //? => undefined

//&&از روی مقادیر true میگذره
var id = 2;
if (false && ++id) {
}
//چون سمت چپ فالس هست سمت راست اجرا نمیشه
console.log(id); //? => 2
console.log(null && 99); //? => null
console.log("B" && NaN); //? => NaN

var obj = { prop: 1 };
console.log(obj && 10); //? => 10
console.log(!!{}); //?=> true
//ابجکت خالی هم باشه ترو به حساب میاد

console.log("A" && undefined); //? => undefined
console.log(false && userName); //? => false
console.log("cat" && ""); //? => false

console.log(null || undefined); //? => undefined
console.log(NaN || null); //? => null
//console.log(NaN || Null); //? =>  Null is not defined
console.log(undefined || NaN); //? => NaN

let obj = { prop: 10 };
console.log(obj || false); //? => {prop : 10}
console.log("cat" || ""); //? => cat
console.log("rabbit" || "fox"); //? => rabbit
console.log(""|| false);//? => false

var id=4;
if(false || ++id){}
console.log(id);//? => 5

console.log(false || 100);//?=> 100
console.log(0 || -1); //?=> -1
//0 = false
console.log("0" || -1); //? => 0

==================================13 question about math ops ====================

console.log(10 * "text"); // NaN
//10 * string = NaN

console.log(4 / 0); //Infinity
console.log("9" * 3); //? => 27
//چون مقدارش میتونه تبدیل بشه به عدد
console.log(-4 / 0); //?=> -Infinity
console.log(200 + undefined); // ?=> NaN
console.log("200" + undefined); // ? => 200undefined
//چون جمع شدن (این استثنا بود)

console.log("200" + "100"); // ? => هر دو استرینگ هستن 200100
console.log(2 + null); //?=> 2 + 0 = 2
console.log(100 + null); //?=>  100+ 0 = 100
console.log('100'+null);//?=> 100null

console.log('a'+ NaN);//? => aNaN
//console.log('a' + Null);//? => Null is not defined
console.log('b' + 'a' + +'a'+'a');//? => baNaNa
console.log('1' - - '1');// ? => 1 - (-1) = 2

===================================10 question  about hoisting==================================

var price = 1000;

(function () {
  console.log(price);//undefined
  var price = 2000;
})();
//چون با ور ساخته شده پس خود متغیر میره بالا ولی مقدارش سرجاش میمونه.
//refactor
(function () {
  var price ;
  console.log(price);
  price = 2000
})();

-------------------------------

function foo(){
    console.log(number);//undefined
}
foo()
var number = 10
//refactor

//توضیحات مثل سوال بالا
---------------------------
display()
var display = function(){
    console.log('Executed ...');//? => display is not a function
}
//هویست نمیشه

--------------------------
show()
function show(){
    console.log('executed...');//? => executed...
}

--------------------------
foo();
var foo = 1;
function foo() {
  console.log("foo execute :))"); //? => foo execute
}
//اول فانکشن هویست میشه
--------------------------
console.log(variable);//? => undefined
var variable = 12

//خود متغیر هویست میشه ولی مقدارش سرجاش میمونه

-------------------------
console.log(MIN);//? => Cannot access 'MIN' before initialization
const MIN = 10;
------------------------
var x;
console.log(x);//? => undefined
x = 1;
//مقدارش هویست نمیشه.
-----------------------


console.log(userID);// Cannot access 'userID' before initialization
let userID = 10;

----------------------
var total = num1 + num2;
var num1 = 100;
var num2 = 5;
console.log(total); //? => NaN
---------------------
========================================۳ question about functions==========
function foo(){
    var number = 10;
    func()
}

function func(){
    console.log(number);//number is not defined
}
foo()

//تابع فانک هویست میشه . ولی دسترسی نداره به متغیر

----------------------------------
 function foo(a, a, a, a, a) {
  console.log("execute");
}
foo(1,1)
//مشکلی توی نام گذاری نداریم. بدون خطا اجرا میشه
----------------------------------

function add(a, b, c) {
  return a + b + c;
}

function add(a, b) {
  return a + b;
}
console.log(add(2, 4, 6));//6
تابع دوم اجرا میشه نه تابع اول

=================================10 question about keyword================

var obj = {
    title:'title',
    get :function (){
        console.log(this);//? => {title: 'title', get: ƒ}
    }
}

obj.get()

-------------------------------------
var number = 100;
console.log(this.number); //? => 100
//this => window
-------------------------------------
var obj ={
    get : function(){
        function fn(){
            console.log(this);//? => window
        }
        fn()
    }
}
obj.get()
//this توی یه فانکشن دیه هست. غیر مستقیم توی getهست

-------------------------------------
function foo() {
  var a = 5;
  func();
}

function func() {
  console.log(this.a);//? => 10
}
var a = 10;
foo();
//هویست میشه و بعنوان یه متغیر سراسری ویندو شناخته میشه.

------------------------------------
var obj = {
    get:function (){
        return this //=> obj
    }
}

console.log(obj.get() === obj);//? => true
//درسته آدرس ابجکت ها با هم فرق دارن. ولی دوتا ابجکتی که مقایسه شدن یکی هستن.

----------------------------------
function foo(){
    console.log(this);
}
foo()//> window

//this در توابع معمولی به ویندو اشاره میکنن 
---------------------------------
console.log(this === window);// ? => true
---------------------------------

'use strict'

function foo(){
    console.log(this);
}
foo() //? => undefined
//چون حالت سخت گیرانه رو داریم دیه به ویندو اشاره نمیکنه
--------------------------------
console.log(typeof this); //? => {window} =>  object

=======================================8 question about objects==============

console.log(typeof {}); // object


var obj = { x: 3, y: 6 };
console.log(Object.keys(obj)); //['x,'y']
//object.keys()==> return key of object


var obj = { a: 2, b: 4 };
console.log(Object.values(obj)); //[2 , 4]
//object.values ===> return value of object


var obj = { a: 1, b: 2 };
Object.freeze(obj);
obj.c = 3;
//وقتی یه چیزی رو فریز میکنیم نمیتونیم بهش پراپرتی اضافه کنیم.
console.log(obj.c);//undefined


var person = {name: 'sabzlearn' , age: 3}
Object.seal(person);
//این متد نمیزاره هیچی از ابجکت حذف کنی.
delete person.age
console.log(person.age);

console.log({} == {}); //false =>  چون رفرنس تایپ به حساب میان و ادرسشون یکی نیس

var users = { 1: "Amin", 2: "Ahmmad", 3: "reza", 4: "Ali" };
console.log(Object.keys(users).length);

========================================70 questions==============
var value = 18;
if (value > 1) {
  var value = 34;
}
const result = value;

console.log(value); //? => 34

//-----------------------------------------
let isTrue = false;
const result1 = isTrue ? 18 : 50;
console.log(result1); // ? => 50
//-----------------------------------------

const array = [1, 2, 3];
console.log(array[3]); //? => undefined
//-----------------------------------------

let value1 = 0;
do {
  value1 += 1;
} while (false);
console.log(value1); // 1
//-----------------------------------------
const arr = [1, 2, 3, 4, 5];

const result2 = arr.push(6) - arr.pop(); //6 - 6
//pop => برگرداننده ی عنصر اخر ارایه
console.log(result2); //0
//-----------------------------------------
const arr1 = [1, 4, 9];
const result3 = 2 in arr;
console.log(result3); //true
//۲ بعنوان ایندکس داخل ارایه وجود داره
//-----------------------------------------

const obj = {
  name: "alireza",
};
const template = JSON.parse(JSON.stringify(obj));
//json.parse یه ابجکت جدید میسازه
console.log(template === obj); //false
//-----------------------------------------

const func = (r, v) => r + v;
const result4 = [1, 2, 3].reduce(func, 0);
//0 بعنوان پیش فرض بهش اضافه شده و تابع رو برای ما اجرا میکنه
console.log(result4); //6
//-----------------------------------------
const check = (value) => value === 3;
const result5 = [1, 2, 3].some(check);
console.log(result5); //true
//سوال میگه عدد ۳ توی ارایه هست یا نه
//-----------------------------------------
const array1 = [1, 2, 3];
let array2 = array1.concat(4, 5, 6);
const result6 = array1;
console.log(result6); //[1,2,3]
console.log(array2); //[1,2,3,4,5,6]
//متد contact هیچ کاری به ارایه اصلی نداره. یه ارایه جدید برمیگردونه
//----------------------------------------
let value = Math.PI;
const result = Math.ceil(value)
//ceil => اعشار رو حذف میکنه و یکی بهش اضافه میکنه
console.log(result);//4

//----------------------------------------------------
const check = value => value ===2;
const result1 = [1,2,3].every(check)
console.log(result1);//false
//چون تمامی ارایه برابر ۲ نیس
//----------------------------------------------------
let text= 'ECMAScript'
console.log(text.charAt(1));//C
//----------------------------------------------------
const result2 = Math.round(19.65)
console.log(result2); // 20
//طبق اعشارت عدد رو رند میکنه
//---------------------------------------------------
let arr = [1,2,3]
let copy = arr.reverse()
console.log(arr === copy);//true
//چون ریورس هم یه خروجی جدید برمیگردونه هم ارایه اصلی رو تغییر میده
//---------------------------------------------------
console.log('34' - '18');//16
//---------------------------------------------------
console.log( true + true); //1 + 1 = 2
//---------------------------------------------------
const func = ()=>{
    return 34;
}
const result3 = 18 && func()// 18 && 34
console.log(result3); // 34
//---------------------------------------------------

let result = "ECMAScript".slice(1, -1);
console.log(result); //CMAScrop
//-----------------------------------------
const array = [1, 2, 3, 4, 5];
const result1 = array.shift() - array.pop(); // 1 - 5 = -4
console.log(result1);
//-----------------------------------------

const array1 = [1, 2, 3];
let result2 = 0;
//حلقه به ایندکس ها اشاره میکنه . چون حلقه for inهست
for (const value in array1) {
  result2 += +value;
}
//چون تبدیل شده به عدد با هم جمع میشن
console.log(result2); //3
//-----------------------------------------

let array2 = [1, 2, 3];
const result3 = 3 in array2;
console.log(result3); //false
//ایندکس ۳ نداریم
//-----------------------------------------
let result4 = 18;
try {
  result4 = 34 / 0;
} catch {
  result4 = 0 / 34;
}
console.log(result4); //infinity
//----------------------------------------

//parseInt => convert string to number
//تا جایی که بتونه به عدد تبدیل کنه این کارو میکنه.
console.log(parseInt("9 text")); //9
console.log(Number("9 text")); //NaN
//Number نمیتونه این کارو کنه

let res = Number.parseInt("2022 Year");
console.log(res); //2022
//---------------------------------------

const plus = +0;
const minus = -0;
//+ و − روی ۰ بی تاثیره
console.log(plus === minus); //true
//---------------------------------------
const name = "JAVAScript";

const func = function () {
  return this.name;
};

const obj = {
  name: "ECMAScript",
  func: func,
};
//refactor

// const obj = {
//   name: "ECMAScript",
//   func: function () {
//     return this.name;
//   },
// };

const result = obj.func();
console.log(result); //ECMAScript
//------------------------------------------------

const getA = () => 1;
const getB = () => 2;
const getC = () => 3;

const result1 = (getA(), getB(), getC())//(1,2,3)
//عملگر کاما سمت راست ترین دیتا رو برمیگردونه
console.log(result1);//3
//----------------------------------------------------

let items = [18, 34, 42, 90];
const noop = (value) => value;

for (var i = 0; i < items.length; i++) {
  noop(items[i]); //0,1,2,3,4
}
const result = i;
console.log(result); // 4
//-------------------------------------------------

const value = 23.45;
const result = value.toFixed(1); //
console.log(result); //23.4
//--------------------------------------------
const obj = {
  name: "ECMAScript",
  version: 2022,
};
const result1 = Object.values(obj).join(""); //['ECMAScript','2022'].join('')
console.log(result1); //ECMAScript2022
//--------------------------------------------

function func() {
  result;
}
const res = func();
console.log(res); //undefined
//--------------------------------------------
let prop = 34;
const result2 = window.prop;
console.log(window.prop); //undefined
//چون با لت ساخته شده و توی ویندو ذخیره نمیشه
//--------------------------------------------
const result3 = "1" == 1;
console.log(result3);//true
//--------------------------------------------

const array = [1,3,5,3,10]
const result4 = array.lastIndexOf(3)
console.log(result4);//3
//ایندکس اخرین ایتم رو که پیدا میکنه برمیگردونه
//-------------------------------------------

const User = function (name) {
  this.name = name;
};

const user1 = new User("alireza");
const user2 = new User("alireza");
console.log(user1 === user2); //false
console.log(user1, user2); //User {name: 'alireza'} / User {name: 'alireza'}
//چون هر دو ابجکت به حساب میان و ابجکت رفرنس  تایپ هستن .پس ادرس هاشون یکی نیس.

//-------------------------------------------
var prop = 1;
var prop = 2;
const result = prop;
console.log(result);//2
//because prop created with var , this this not problem
//-------------------------------------------------

const array = [1,2,3]
array.length = 0;//[]
const result = array[0]
console.log(result);//undefined
//----------------------------------------------

eval یه چیزی رو میگیره و اون رو در قالب جی اس اجرا میکنه.
const value =34;
const result1 = eval('value + value')// value + value = 34 + 34
console.log(result1);
//----------------------------------------------

const str = 'JAVAScript'
const result2 =  str.length;
console.log(result2);//10
//---------------------------------------------


const first = 18;//type of number
const second = new Number(first)//type of Object
const result = first === second; // false
console.log(result);
//---------------------------------------------------

const func = function fName(){
    return 18;
}

const result1 = typeof fName;
اسم تابع funcهست.
console.log(result1);

//--------------------------------------------------
پراپرتی toString  وجود داره توی ابجکت ها

const obj1 ={}
const result1 = 'toString' in obj1
console.log(result1);//true
//---------------------------------------------------

const array = new Array(20)
const result = array[0]
console.log(array);//[empty * 20]
console.log(result);//undefined
console.log(typeof array);//object
const result = typeof add;
function add(first, second) {
  return first * second;
}

console.log(result); //function
//---------------------------------------

let someValue = 18;
function func() {
  someValue = 34; //block scope
  return;
  function someValue() {}
}
func();
const result1 = someValue;
console.log(result1); //18
//---------------------------------------

const array = [1, 2, 3, 4, 5];
const result2 = array.fill(1, 2).join(""); //[1,2,1,1,1].join('')
console.log(result2); //12111
//---------------------------------------

const array1 = [1, 2, 3];
const result3 = array1.concat([4], [5]);
console.log(result3); //[1,2,3,4,5]
//--------------------------------------

const result4 = true * 10 - 1;
console.log(result4);//1*10-1=9
//=========================================11 question end=============

//for which value of x the results of the following logs are not the same ?
let x = NaN;
console.log(x <= 100);
console.log(!(x > 100));
//-------------------------------------------
// write a mul function which work property when invoked with following syntax.
console.log(mul(2)(3)(4)); //output=24
console.log(mul(4)(3)(4)); //output=48

function mul(a) {
  return function (b) {
    return function (c) {
      return a * b * c;
    };
  };
}

//-----------------------------------------------
//how to empty an error in js?
var arrayList = ["a", "b", "c", "d", "e", "f"];

//way 1
// arrayList.length = 0;

//way 2
// arrayList.splice(0, arrayList.length);

//way 3
while(arrayList.length){
    arrayList.pop()
}

console.log(arrayList);//[]
//----------------------------------------------

var output = (function (x) {
  delete x;
  return x;
})(0);

console.log(output); //output = 0
//دیلت برای ابجکت کار میکنه نه متغیر ها

//-------------------------------------------

var x = 1;

var output = (function(){
    delete x;
    return x;
})()
console.log(output);//1
//--------------------------------------------
var x = { foo: 1 };

var output = function () {
  delete x.foo; //delete prop of object
  return x.foo;
};
console.log(output()); //undefined
//---------------------------------------------------

var trees = ["aaa", "bbb", "ccc", "ddd", "eee"];

delete trees[3];
console.log(trees.length);// 5 => ['aaa', 'bbb', 'ccc', empty, 'eee']
//-------------------------------------

function mul(x) {
  return function (y) {
    return function (z) {
      return function (w) {
        return function (p) {
          return x * y * z * w * p;
        };
      };
    };
  };
}
console.log(mul(2)(3)(4)(5)(6)); // 720

//----------------------------------------------------

function setName() {
  this.name = "text";
}
setName();
console.log(this.name); //text

//----------------------------------------------------

function func(num1) {
  var num2 = 6;
  function TDK() {
    var num3 = 10;
    console.log(num1 * num2 * num3);//5*6*10 => 300
  }
  return TDK;
}

let TeamDevKode = func(5);
TeamDevKode()

//-------------------------------------------------------

let a = 3;
let b = new Number(3);
let c = 3;

console.log(a == b); //true
console.log(a === b); // number != object => false
console.log(a === c);

//------------------------------------------------------













