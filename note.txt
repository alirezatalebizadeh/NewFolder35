=================================================================
====================search question to find question=============
=================================================================





hr ==> human resource (مسول منابع انسانی)
وظیفه : مسول دیدن رزومه و  استخدام و اخراج و پاسخ گویی به سوالات کارمندان  ... افراد در شرکت 
=========================مهارت نرم================================
شبکه سازی مهمتر از ساختن رزومه و انتشار آن در سایت های کاریابی هست. ❤️شغل های خفن با اگهی پر نمیشن.❤️

اصل :
حضور فعال در شبکه های اجتماعی (اینستا و لینکدین و ...) + کمک به بقیه برنامه نویسان 

شبکه سازی ==> اشتراک دانش و تجربه / دیده شدن / افزایش فروش

ارتباط با هر شخصی شبکه سازی نیس...(با افراد هم رنگ خودت در کار ارتباط بگیر)
محبوبیت نه معروفیت...(اعتبار خیلی مهمه )
عدم سواستفاده از موقعیت... 
شبکه بازی پارتی بازی نیس...
از خودگذشتگی (مادی و معنوی) .تیم خوب رو به خاطر درامد کم از دست نده. تیم خوب رو محکم بچسب.
شبکه بزرگتر =! شبکه قوی تر(کیفیت افراد مهمتره تا تعداد زیاد افراد)
حفظ ارتباط و شبکه (ارتباط یعنی مداوم و پی در پی با هم بودن نه فقط شماره داشتن)
عدم درگیری با افراد شبکه  
==============
با رفرنس صحبت کن.اسم رفرنست رو بیار بین حرفات . اضافه گویی نکن. 
mdn , javascript.jsرو کامل بخون.

مصاحبه کننده با بیانت میفهمه چقدر تسلط داری و باید ردت کنه یا نه !

پاسخ بلند و کش دار نده به مصاحبه کننده. علمت رو تا جایی که بلدی ارايه بده . اضافه گویی نشونه تازه کار بودنه .

از اون اندازه که هستی بیشتر نشون نده. علمت و مهارتتو صادقانه ارايه بده . تکنولوژی که بلد نیستی رو روش مانور نده که بلدی.

========================= سوالات مبتدی و سطح جونیور=========================

مدت زمان مطرح نیس . سطح مهارت و تجربه ادامه راهتو مشخص میکنه .
سطح جونیور نیازمند منتوره و با تکنولوژی ها آشنایی نداره. دایم باید یکی بالا سرش باشه. سوالاتی مثل کدوم راهو برم داره.ری اکت برم با ویو. نمیتونه یکی رو منتور کنه و بالاسرش باشه. 

جونیور بودن خجالت نداره . پیوسته آموزش ببین. با افتخار برو سر جلسات و به اندازه توانت ارايه بده. 

===========================data tyoes=================

string ('text' , "text" , `text`) /
number(-12 , 3.14 , +12) / 
bigInt  (math.max_value) / 
boolean (true , false) /
undefined ()/ زمانی که نوع یه چیزی مشخص نیس
object {id , name, password , ...}/==>برای ذخیره ی اطلاعات کاربران 
(null / type0f null==> object (این یک باگ توی جاوااسکریپت هست)(زمانی که بخوایم مقدار اولیه ای به یه متغیر بدیم و توی فانکشن و جاهای دیگه مقدارش رو مشخص کنیم.))
symbol /مثل ایدی کاربر و هر چیزی که منحصر به فرد و یکتا هست

array /==> یه نوع ابجکت به حساب میان ولی keyولیو دارن

=======================================false and true value

false : 
false , 0 , -0 , - (number value) , "", null , undefind , NaN , 

true : other values 

کاربرد : در شرط  ها و صحت سنجی برای گرفتن اطلاعات واقعی از حافظه لوکال استورج    

if(!value or !isLogin) {
    //code
}
========================what's deffrent between null and undefind?=========


let myFirstVal= null;
let mySecondVar = undefined;
let mtThirdVar ;//whitOut value
console.log(myFirstVal);//=> nul
console.log(mySecondVar);//=> undefined
console.log(myFirstVal);// null


function logger(num){
    console.log(num);
}
logger()//without value ==> undefined

//null = 0 
console.log(null + 10 ); // 0+10 = 10
console.log(null * 5); // 0*5 =0
//undefined = ? ( نامشخص و ناشناس)
console.log(undefined + 10); // ==> NaN
console.log(Boolean(undefined));//false
console.log(Boolean(null));//false

console.log(null == undefined);//true
console.log(null === undefined);//false
console.log(!undefined === !null) //(true === true);//! true

==========================================Scope=================

types:

global
local {
    block ,
    function
}

گلوبال ها همه جا قابل دسترسی ان.

var / let / const

var همه جا قابل دسترسه حتی اگه لوکال باشه
let globalVar = "global";

{
  let localVar = "local";
}


//console.log(globalVar);//global
//console.log(localVar);// not defined


function logger(){
    if(true){
        var varVar = 'Var value'
        let letVar = 'let Value'
        const constVar= 'const Var'
    }

    console.log(varVar);//var value
    console.log(letVar);//not defined
    console.log(constVar);//
}
logger()
----------------------------question1------------

function func(obj) {
  // اسم ورودی گمراه کننده هست.
  obj = null;
  console.log(obj); //null
}
// console.log(obj); Cannot access 'obj' before initialization

const obj = {
  name: "Sabzlearn",
};

func(obj);

const result = obj.name;
console.log(result); //sabzlearn

-------------------------Case sensetive----------------
به حروف بزرگ و کوچیک حساسه.
let user1 = "Amin";
let user2 = "min";

console.log(user1 == user2); //false

console.log('null'==='Null'); //false

onsole.log(typeof Null);//undefined

console.log(typeof undefined === typeof Null);// undefined = undefined ==>true

let result = typeof !!null; // ==> typeof false
console.log(result);//Boolean
console.log(!'alireza');//false

----------------------access to object prop-----------------------

let user={
    name:'Alireza',
    family:'zare',
    age:25
}

//Way 1 ==> Dot notation
console.log(user.name);//Alireza
let prop='name'
console.log(user[prop]);//Alireza

//Way2 ==> Brocket notation
console.log(user['family']);


--------------------------question------------------
const propName = 'sabzlearn'

const obj ={
    [propName]: propName
}

const result = obj['propName'] // ==> obj.propName

console.log(obj); // ==> {sabzlearn :'sabzlearn'}

console.log(result);// ?
//undefined

--------------------------delete method------question---------------------

delete can not delete varable (just delete prop of object)


let number =12;

//delete can not delete varable
delete number

const result= number
console.log(result);//? =>12

------------------------------

let number ={
    item:12
}

delete number.item
//delete can not delete varable

const result= number.item
console.log(result);// ? => undefined


==============================oprator usage (or  ,  and)====================================

|| ==> or از روی مقادیر فالس میگذره و مقادیر ترو رو برمیگردونه (trueor ترور)

console.log(true || alert(12)); //true
//console.log(false || alert(12)); //run alert
//console.log(false || true || alert(12)); //true
console.log(0 || 12 || alert(12));//12
console.log(0 || 'sabzlearn'|| alert('ali'));//sabzlearn
console.log(0 || ""|| 4000);//4000

-------------------
&& ==> and . از رو ترو رد میشه.اگه با فالس برسه متوقف میشه.

console.log('amin'&& 'amir');//true && true => amir

let numbers = [1,2,3,4,5,6,7,8,9]

numbers.length > 0 && numbers.forEach(num => console.log(num))// 1,2,3,4,5,...


---------------------------------------question--------------
let result1 = null || undefined ||18; // false || false ||true
let result2= null && undefined 
console.log(result1); ?//18
console.log(result2); ?//null

---------------------------------------question----------
let result = 0 || 1 && 2 && 3 ; //false || true && true && true

console.log(result);//? => 3

=============================arquments======================

گیرنده ی تمامی ورودی های یک تابع هست و یک شبه آرایه هست . باید حتما تبدیلش کنی با ارایه بعد روش کار کنی.
function addNumbers(){
    let sum = 0;
    Array.from(arguments).forEach(num => {
        sum +=  num
    });
    return sum
}

// addNumbers(1,2,3,4)//Arguments(4) [1, 2, 3, 4, callee: ƒ, Symbol(Symbol.iterator): ƒ]

console.log(addNumbers(1,2,3,4,5,6,7,8,9));//45

----------------------------------------question------------------
const addNumbers = () => {
  let sum = 0;

  Array.from(arguments).forEach((num) => {
    sum += num;
  });
  return sum;
};

console.log(addNumbers(1, 2, 3, 4, 5, 6, 7, 8, 9));//app.js:4 Uncaught ReferenceError: arguments is not defined

توی اروو فانکشن نمیتونیم از ارگیومنت استفاده کنیم.

==================================hoisting================================
یعنی بالابردن .

افعالی که بصورت ساده تعریف میشن و متغیر هایی که با کلمه ور ساخته میشن هویست میشن.
looger()

function looger(){
    console.log('log');
}

number=12
console.log(number);

var number;

--------------------------------question------------------------------------
فقط تعریف متغیر هویست میشه . نه مقدار دادن بهش.

var age = 10;

function logAge() {
    var age
  console.log(age);
   age = 20;
}

logAge();//? => undefined

===========================Number method==================================
برای تبدیل یه داده به نوع عددی استفاده میشه.

let num = Number("15");
let num2 = Number("Alireza");
console.log(num); //15
console.log(num2); //NaN
console.log(Number(true)); //1
console.log(Number(false)); //0
console.log(Number("")); //0
console.log(Number('')+15);  //15

----------------------------question--------------------------
function addParams(firstParam, secondParam = 5) {
  return firstParam + secondParam;
}
//ورودی تابع زمانی دیفالتش رو بر میداره که نامشخض باشه نه نال
//null = 0;
let res = addParams(7, null); // ?=> 7 + 0 = 7
let res2 = addParams(7, undefined); // ?=> 7 + 5 = 12
console.log(res);

----------------------------question-----------------------------
let result = 18;

function func() {
  inner();
  return;

  function inner() {
    result = 30;
  }
}

func();

console.log(result); //? => 30
//چون تابع به هویست میشه .

================================= توابع خودخوان IIFE(self invoked)==============================
این توابع نیازی به فراخوانی نداره و خود به خود اجرا میشه.

برای ساخت کتابخونه و پلاگین استفاده میشه.

//Syntax
(function () {
  console.log('I.m alireza from iran');
})();

------------------------------------------question---------------------
let outSide = 18;

if (outSide) {
  let inSide = 30;
}
// چون با کلمه لت ساخته شده بهش دسترسی نداریم

let result = typeof inSide;
console.log(result); //? ==>  undefined


============================ Automatic Selection Insertion ===============================
بصورت  اتوماتیک مرورگر انتهای کدهامون سمی کالون میزاره.


//استثنا ها
let num1 = 2;
let num2 = 2;

let numbers = [1, 2, 6];

numbers.forEach((num) => {
  console.log(num);
});

["ali", "reza", "mohammad"].forEach((person) => {
  console.log(person);
});

(function () {
  console.log("IIFE");
})();

const userGenerator = (userName = "alireza") => {
  return {
    name: userName,
  };
};

console.log(userGenerator()); //{name :'alireza'}

let a = 5;
let b = 3 + a ;
('sabzlearn' + a).toUpperCase()
-----------------------------question-------------------------------
function func1() {
  return {
    name: "alireza",
  };
}

function func2() {
  return;
  {
    family: "zare";
  }
}

console.log(typeof func1()); //? object
console.log(typeof func2()); //? undefined

--------------------------------question------------------------------

let value = 13;
const result = value--;
console.log(value);//? ==> 12
console.log(result);//? ==>13

// let num1 = 10;
// console.log(num1);
// num1--; //9
// --num1; //8
// num1++; //9
// ++num1; //10
// console.log(num1);

----------------------------------question---------------------------------
بهعد از ۳۴ باید سمی کالون بزاری که به ارور نخوری. مرورگر فکر میکنه روی ۳۴ فانکشن اجرا کردی
var value = 18;
var result = 34

(function () {
  result = value;

  var value = 90;
})();

console.log(result); //? => undefined

//refactor

(function () {
  var value;

  result = value; //undefined
  //متغیر هویست میشه و میره خط اول. اما مقدارش توی همین خط میمونه.چوم مقدار نداری نتیجش اندیفایند میشه
  value = 90;

  var value = 90;
})();

--------------------------------------question--------------------------
var foo = (function () {
  var foo = 2;
})();
//چیزی بر نگردونه . اگه برمیگردوند میشه ۲
console.log(foo);//? ==> undefined

-----------------------------------------question-----------------------
var result = (function (){
  var name = 'sabzlearn'
  return name
})()
//چون مقدار رو برگردونده 
console.log(result);//? => sabzlearn

---------------------------------------------question--------------------
var app = {}(function (param) {
  console.log(param === app); //? => true
})(app);
//دریته دتا ابجکت با هم مقایسه شدن ولی دپتاش یکی هستن. ادرس هاشون ا هم برابره.پس نتیجه مقایسه ترو میشه

-------------------------------------question--------------------------

(function (){
  var a = 5;
})()

console.log(a); 
//چون متغیر توی فانکشن تعریف شده 
//output => Error : a is not defined
--------------------------------------question--------------------------
-function(){
console.log('text');
}()
//مشکلی نداره . حتی سینتکسی
//output => text
--------------------------------------question-------------------------
var app = {};

(function (param) {
  param.name = "alireza";
})(app);
console.log(app.name);

//چون ابجکت رفرنس تایپ به حساب میاد  خروجی  بهمون میده
//output => alireza

-------------------------------------question-------------------------


















